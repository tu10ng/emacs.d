#+PROPERTY: header-args :results output none
* some words
config mainly based on [[https://github.com/VitalyAnkh/config][@VitalyAnkh emacs config]]
please do not reward me credits when fetching snippets from my config.

* rudimentary configuration
#+begin_src emacs-lisp :comments no
(require 'org-tempo)
#+end_src

** Personal information
#+begin_src emacs-lisp
(setq user-full-name "tu10ng"
      user-mail-address "2059734099@qq.com")
#+end_src

** Workaround
it should be empty in the best scenario
#+begin_src emacs-lisp
(setq native-comp-async-jobs-number 20)


#+end_src

Test some package
#+begin_src emacs-lisp

#+end_src

** better defaults
*** simple settings
[[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#use-better-defaults][angrybacon/dotemacs]]
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 indent-tabs-mode nil
 tab-width 4
 sentence-end-double-space nil
 )

(setq undo-limit 80000000
      truncate-string-ellipsis "…"
      password-cache-expiry nil   
      scroll-preserve-screen-position 'always 
      scroll-margin 0
      scroll-conservatively 0
      kill-whole-line t
      word-wrap-by-category t  
      warning-minimum-level  :error 
      org-return-follows-link t
      confirm-kill-processes nil
      read-process-output-max 1048576  ; cat /proc/sys/fs/pipe-max-size
      inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t
      initial-buffer-choice nil
      initial-scratch-message nil
      shell-command-prompt-show-cwd 1
      inhibit-compacting-font-caches t
      display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t
      use-short-answers t
      y-or-n-p-use-read-key t
      read-char-choice-use-read-key t
      make-backup-files nil
      next-line-add-newlines t
      )

(put 'upcase-region    'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(global-subword-mode 1)           

(global-visual-line-mode 1)       

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+end_src
*** rm scratch buffer
#+begin_src emacs-lisp
(setq initial-scratch-message "")
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+end_src
*** frame sizing
#+begin_src emacs-lisp
(toggle-frame-maximized)
(toggle-frame-fullscreen)
#+end_src
*** auto-customizations
change though customisation interface will not add to =init.el=.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
*** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons)

#+end_src
*** window
**** split default
#+begin_src emacs-lisp
(setq split-height-threshold nil)         ;don't split vertically
(setq split-width-threshold 0)            ;need to set this bc `split-window-sensibly' will disregard height-threshold

#+end_src
**** shackle
#+begin_src emacs-lisp
;; Customize popwin behavior
(use-package shackle                    ;*customize* not working?
  :hook (after-init . shackle-mode)
  :custom
  (shackle-default-size 0.5)
  (shackle-default-alignment 'bellow)
  (shackle-rules
   '((magit-status-mode    :select t :align right)
     (magit-log-mode       :select t :align below :popup t :same nil)
     (magit-rev-mode       :select t :align right)
     ("*quickrun*"         :select t)
     (profiler-report-mode :select t)
     (xwidget-webkit-mode  :select t :same t)
     (apropos-mode         :select t :align right :size 0.2)
     (help-mode            :select t :align right)
     (helpful-mode         :select t :align right :size 0.3)
     (comint-mode          :select t :align right :size 0.2)
     (grep-mode            :select t :align right)
     (rg-mode              :select t :align right)
     (compilation-mode     :select t :align right :size 0.2)
     (Man-mode             :select t :align right)
     (info-mode            :select t :align right :popup t :size 0.5)
     ("*elfeed-entry*"     :select t :align right :popup t :same nil :size 0.5) ;
     ("*eww*"              :select t :align right :popup t :size 0.6)
     ("*Org todo*"         :select t :align right :popup t :size 0.3)
     ("*Org Agenda*"       :select t :align right :popup t :size 0.3)
     ("*devdocs*"          :select t :align right :popup t :size 0.6)
     ("*Shell Command Output*"    :select nil :align bellow :size 0.4)
     ("*Async Shell Command*"     :select nil :align bellow :size 0.4)
     ("*Org-Babel Error Output*"  :select nil :align bellow :size 0.3)
     ("*package update results*"  :select nil :align bellow :size 10)
     ("*Process List*"            :select t   :align bellow :size 0.3)
     ("*Occur*"                   :select t   :align bellow))))

;; All `temp-buffer's, e.g. *Completions*, will never mess up window layout.
(use-package help
  :ensure nil
  :hook (after-init . temp-buffer-resize-mode)
  :custom
  (help-window-select t))

#+end_src
*** find-file make-directory
#+begin_src emacs-lisp
(defun my-find-file (orig-fun &rest args)
  (let* ((filename (car args))
         (directory (file-name-directory filename)))
    (if (not (file-directory-p directory))
        (make-directory directory t))
    (apply orig-fun args)))

(advice-add 'find-file :around 'my-find-file)

#+end_src
*** gc

#+begin_src emacs-lisp
(use-package gcmh)
(setq gcmh-high-cons-threshold (* 1 1024 1024))
(gcmh-mode 1)


#+end_src
*** emacs c source directory
#+begin_src emacs-lisp
(setq source-directory "/home/qb/Projects/emacs-git/")
(setq find-function-C-source-directory "/home/qb/Projects/emacs-git/src/")


#+end_src
*** byte compile
#+begin_src emacs-lisp
(setq load-prefer-newer t)

#+end_src

*** mouse 
Thanks to Po Lu, scrolling in emacs is great again!
#+begin_src emacs-lisp
(pixel-scroll-precision-mode 1)
(setq pixel-scroll-precision-large-scroll-height 60
      pixel-scroll-precision-interpolation-factor 3.0)
#+end_src

*** auto-revert
#+begin_src emacs-lisp
(use-package autorevert
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 1)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  )

#+end_src

*** auto-save
recommend use with vc to avoid accident lost.
#+begin_src emacs-lisp
(setq auto-save-default nil)

(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-save/")
(require 'auto-save)
(setq auto-save-idle 0.5)
(setq auto-save-silent t)
(setq auto-save-delete-trailing-whitespace nil)

(auto-save-enable)

#+end_src

*** Drag text from emacs to other apps
Thanks to Po Lu!
#+begin_src emacs-lisp
(setq
 mouse-drag-and-drop-region-cross-program t
 mouse-drag-and-drop-region t)
#+end_src
** emacs configuration
*** modules
**** interface
***** orderless
#+begin_src emacs-lisp
(use-package orderless)

(setq completion-styles '(orderless partial-completion basic))

(setq completion-category-defaults nil)

(setq orderless-matching-styles '(orderless-literal
                                  orderless-regexp
                                  ;; orderless-flex
                                  orderless-initialism
                                  orderless-prefixes))
                                  
#+end_src
***** capf
****** corfu
only use TAB and S-TAB to select candidate and auto insert
corfu will not be tangled with move commands
#+begin_src emacs-lisp
(setq tab-always-indent 'complete)

(use-package corfu
  :bind
  (:map corfu-map
   ([remap next-line] . nil)
   ([remap previous-line] . nil)
   ([remap newline] . nil)
   ("RET" . nil)
   ([ret] . nil)
   ("M-p" . nil)
   ("M-n" . nil)
   ("TAB" . corfu-next)
   ([tab] . corfu-next)
   ("S-TAB" . corfu-previous)
   ([backtab] . corfu-previous)))
 
(setq corfu-auto t
      corfu-quit-no-match t
      corfu-auto-delay 0
      corfu-auto-prefix 0
      corfu-cycle t
      corfu-preselect-first nil
      )

(global-corfu-mode 1)
#+end_src
corfu documentation
#+begin_src emacs-lisp
(setq corfu-popupinfo-delay 0
      corfu-popupinfo-max-height 30)

(corfu-popupinfo-mode 1)
#+end_src
****** cape
#+begin_src emacs-lisp
(use-package cape)
(add-to-list 'completion-at-point-functions #'cape-file)
#+end_src

***** vertico
****** vertico common
#+begin_src emacs-lisp
(use-package vertico
  :hook (after-init . vertico-mode)
  :config
  (setq vertico-count 15)
  (face-spec-set 'vertico-current
                 '((((background light))
                    :background "#d8d8d8" :extend t)
                   (t
                    :background "#454545" :extend t))
                 'face-defface-spec))

;; persist history over emacs restarts.
(savehist-mode 1)

;; Add prompt indicator to `completing-read-multiple'.
;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
(defun crm-indicator (args)
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

(setq read-extended-command-predicate
      #'command-completion-default-include-p)
(setq enable-recursive-minibuffers t)
#+end_src

****** vertico-directory
delete directory name in one go
#+begin_src emacs-lisp
(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

****** Rich annotation
#+begin_src emacs-lisp
(use-package marginalia)
(marginalia-mode)
#+end_src

***** lsp
#+begin_src emacs-lisp
(use-package eglot)
(add-to-list 'completion-category-overrides '((eglot (styles orderless))))

(use-package consult-eglot)
(dolist (hook '(c-mode-common-hook
                fish-mode-hook
                shell-mode-hook
                html-mode-hook
                python-mode-hook
                ))
  (add-hook hook #'eglot-ensure))
#+end_src
**** language support
#+begin_src emacs-lisp
(use-package systemd)
(use-package fish-mode)
#+end_src
**** everything in emacs
*** visual settings
**** font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Source Code Pro:pixelsize=23")

#+end_src
**** theme
loading theme is remarkably slow
#+begin_src emacs-lisp
(load-theme 'tango-dark)

;; tweek
;; prefer green on black(or gray)
;; blue is the color of the wisdom(conosuba)
(set-face-attribute 'mode-line nil
                    :foreground "green"
                    :background "DarkBlue")
(set-face-attribute 'default nil
                    :foreground "green")

#+end_src
**** modeline
**** misc
#+begin_src emacs-lisp
(use-package hl-todo)
(global-hl-todo-mode)
#+end_src
*** helper macros
*** proxy
#+begin_src emacs-lisp
(setq url-proxy-services
      '(("http" . "127.0.0.1:8889")
        ("https" . "127.0.0.1:8889"))
      )
#+end_src

*** babel
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
			                 '((emacs-lisp . t)))

#+end_src
** other things
*** editor interaction
*** restart emacs
#+begin_src emacs-lisp
(use-package restart-emacs)
(defun restart-emacs-reopen-current-file ()
  "restart emacs then reopen the file being visited when casting this command.
if the buffer isn't a file, simply restart emacs."
  (interactive)
  (if (buffer-file-name)
      (restart-emacs (split-string (buffer-file-name)))
    (restart-emacs)))

#+end_src
*** restore session
#+BEGIN_SRC emacs-lisp
;; Back to the previous position
(use-package saveplace
  :hook (after-init . save-place-mode))

#+end_src
*** recent file
#+begin_src emacs-lisp
(use-package recentf
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 3000)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '( ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))
#+END_SRC
*** tmp daemon server
#+begin_src emacs-lisp
(require 'server)
(or (eq (server-running-p) t)
    (server-start))
#+end_src

*** system daemon
For running a systemd service for a Emacs server I have the following
#+name: emacsclient service
#+begin_src systemd :tangle ~/.config/systemd/user/emacs.service :mkdirp yes
[Unit]
Description=Emacs server daemon
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=sh -c 'emacs --daemon && emacsclient -c --eval "(delete-frame)"'
ExecStop=/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill emacs))"
Restart=on-failure
Environment=COLORTERM=truecolor

[Install]
WantedBy=default.target
#+end_src
which is then enabled by
#+begin_src shell :tangle (if (string= "enabled\n" (shell-command-to-string "systemctl --user is-enabled emacs.service")) "no" "setup.sh")
systemctl --user disable emacs.service
#+end_src

For some reason if a frame isn't opened early in the initialisation process, the
daemon doesn't seem to like opening frames later --- hence the ~&& emacsclient~
part of the =ExecStart= value.
It can now be nice to use this as a 'default app' for opening files. If we add
an appropriate desktop entry, and enable it in the desktop environment.

#+begin_src conf :tangle ~/.local/share/applications/emacs-client.desktop :mkdirp yes
[Desktop Entry]
Name=Emacs client
GenericName=Text Editor
Comment=A flexible platform for end-user applications
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -create-frame --alternate-editor="" --no-wait %F
Icon=emacs
Type=Application
Terminal=false
Categories=TextEditor;Utility;
StartupWMClass=Emacs
Keywords=Text;Editor;
X-KDE-StartupNotify=false
#+end_src
*** Emacs client wrapper
I frequently want to make use of Emacs while in a terminal emulator. To make
this easier, I can construct a few handy aliases.

However, a little convenience script in =~/.local/bin= can have the same effect,
be available beyond the specific shell I plop the alias in, then also allow me
to add a few bells and whistles --- namely:
+ Accepting stdin by putting it in a temporary file and immediately opening it.
+ Guessing that the =tty= is a good idea when ~$DISPLAY~ is unset (relevant with SSH
  sessions, among other things).
+ With a whiff of 24-bit color support, sets ~TERM~ variable to a =terminfo= that
  (probably) announces 24-bit color support.
+ Changes GUI =emacsclient= instances to be non-blocking by default (~--no-wait~),
  and instead take a flag to suppress this behaviour (~-w~).

I would use =sh=, but using arrays for argument manipulation is just too
convenient, so I'll raise the requirement to =bash=. Since arrays are the only
'extra' compared to =sh=, other shells like =ksh= etc. should work too.

#+name: e
#+begin_src shell :tangle ~/.local/bin/e :mkdirp yes :tangle-mode (identity #o755) :comments no
#!/usr/bin/env bash
force_tty=false
force_wait=false
stdin_mode=""

args=()

while :; do
    case "$1" in
        -t | -nw | --tty)
            force_tty=true
            shift ;;
        -w | --wait)
            force_wait=true
            shift ;;
        -m | --mode)
            stdin_mode=" ($2-mode)"
            shift 2 ;;
        -h | --help)
            echo -e "\033[1mUsage: e [-t] [-m MODE] [OPTIONS] FILE [-]\033[0m

Emacs client convenience wrapper.

\033[1mOptions:\033[0m
\033[0;34m-h, --help\033[0m            Show this message
\033[0;34m-t, -nw, --tty\033[0m        Force terminal mode
\033[0;34m-w, --wait\033[0m            Don't supply \033[0;34m--no-wait\033[0m to graphical emacsclient
\033[0;34m-\033[0m                     Take \033[0;33mstdin\033[0m (when last argument)
\033[0;34m-m MODE, --mode MODE\033[0m  Mode to open \033[0;33mstdin\033[0m with

Run \033[0;32memacsclient --help\033[0m to see help for the emacsclient."
            exit 0 ;;
        --*=*)
            set -- "$@" "${1%%=*}" "${1#*=}"
            shift ;;
        ,*)
            if [ "$#" = 0 ]; then
                break; fi
            args+=("$1")
            shift ;;
    esac
done

if [ ! "${#args[*]}" = 0 ] && [ "${args[-1]}" = "-" ]; then
    unset 'args[-1]'
    TMP="$(mktemp /tmp/emacsstdin-XXX)"
    cat > "$TMP"
    args+=(--eval "(let ((b (generate-new-buffer \"*stdin*\"))) (switch-to-buffer b) (insert-file-contents \"$TMP\") (delete-file \"$TMP\")${stdin_mode})")
fi

if [ -z "$DISPLAY" ] || $force_tty; then
    # detect terminals with sneaky 24-bit support
    if { [ "$COLORTERM" = truecolor ] || [ "$COLORTERM" = 24bit ]; } \
           && [ "$(tput colors 2>/dev/null)" -lt 257 ]; then
        if echo "$TERM" | grep -q "^\w\+-[0-9]"; then
            termstub="${TERM%%-*}"; else
            termstub="${TERM#*-}"; fi
        if infocmp "$termstub-direct" >/dev/null 2>&1; then
            TERM="$termstub-direct"; else
            TERM="xterm-direct"; fi # should be fairly safe
    fi
    emacsclient --tty -create-frame --alternate-editor="" "${args[@]}"
else
    if ! $force_wait; then
        args+=(--no-wait); fi
    emacsclient -create-frame --alternate-editor="" "${args[@]}"
fi
#+end_src
Now, to set an alias to use =e= with magit, and then for maximum laziness we can
set aliases for the terminal-forced variants.
#+begin_src shell :tangle no
alias m='e --eval "(progn (magit-status) (delete-other-windows))"'
alias mt="m -t"
alias et="e -t"
#+end_src
* packages
** INTRUCTIONS
This is where you install packages.
This file shouldn't be byte compiled. TODO: why?
begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
end_src
*** package in melpa/elpa/emacsmirror
#+begin_src emacs-lisp

#+end_src
*** package from git repo
** convenience
*** avy
What a wonderful way to jump to buffer positions.
#+begin_src emacs-lisp
(use-package avy)
(setq avy-all-windows t)
(global-set-key (kbd "C-;") 'avy-goto-char-2)
#+end_src
*** which-key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.6
	    which-key-idle-secondary-delay 0
	    which-key-sort-order 'which-key-prefix-then-key-order
	    ))
#+end_src
*** meow
i prefer stay in insert mode
we treat meow as mode to manipulate text, with advantage of more keys provided than other package which usage complex kebindings which is hard to remember.
Esc will be used to enter & leave normal mode
**** meow setup
#+begin_src emacs-lisp
(use-package meow)
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("(" . meow-beginning-of-thing)
   '(")" . meow-end-of-thing)
   '("/" . meow-visit)
   ;; '("a" . meow-append)
   '("A" . meow-join)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . tu10ng/open-below)
   '("E" . tu10ng/open-above)
   '("f" . meow-next-symbol)
   '("F" . meow-mark-symbol)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   ;; '("i" . meow-insert)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("P" . pop-to-mark-command)
   '("q" . meow-quit)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-find)
   '("S" . tu10ng/meow-find-back)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-grab)
   '("w" . meow-kill)
   '("x" . meow-line)
   '("X" . meow-line-expand)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("\\" . quoted-insert)
   '("<escape>" . meow-insert)))

;; (defun meow-insert-define-key (&rest keybindings)
;;   "Define key for insert state.

;; Usage:
;;   (meow-insert-define-key
;;    '(\"C-<space>\" . meow-insert-exit))"
;;   (mapcar (lambda (key-ref)
;;             (define-key meow-insert-state-keymap
;; 			            (kbd (car key-ref))
;; 			            (meow--parse-def (cdr key-ref))))
;;           keybindings))

;; (meow-insert-define-key
;;  '("ESC" . meow-insert-exit))


#+end_src
**** cursor behave
#+begin_src emacs-lisp
(setq meow-mode-state-list '((authinfo-mode . insert)
                             (magit-mode . insert)
                             (beancount-mode . insert)
                             (bibtex-mode . insert)
                             (cider-repl-mode . insert)
                             (cider-test-report-mode . insert)
                             (cider-browse-spec-view-mode . insert)
                             (cargo-process-mode . insert)
                             (conf-mode . insert)
                             (deadgrep-edit-mode . insert)
                             (deft-mode . insert)
                             (diff-mode . insert)
                             (ediff-mode . insert)
                             (gud-mode . insert)
                             (haskell-interactive-mode . insert)
                             (help-mode . insert)
                             (json-mode . insert)
                             (jupyter-repl-mode . insert)
                             (mix-mode . insert)
                             (occur-edit-mode . insert)
                             (pass-view-mode . insert)
                             (prog-mode . insert)
                             (py-shell-mode . insert)
                             (restclient-mode . insert)
                             (telega-chat-mode . insert)
                             (term-mode . insert)
                             (text-mode . insert)
                             (vterm-mode . insert)
                             (Custom-mode . insert)))
#+end_src
**** meow config

#+begin_src emacs-lisp


(setq meow-use-clipboard t
      meow-visit-sanitize-completion nil
      meow-expand-exclude-mode-list nil
      meow-expand-hint-remove-delay 1
      )

(setq meow-cursor-type-insert '(block . 2))
(meow-setup)
(meow-global-mode 1)
#+end_src
**** meow commands
#+begin_src emacs-lisp


;; TODO M-; should enter edit mode, insert mode still block cursor, one key to change window focus, keypad mode should default enter C-x
;; TODO put in seperate file and load
(defun tu10ng/meow-find-back (n ch &optional expand)
  "Find the next N char read from minibuffer."
  (interactive "p\ncFind:")
  (let ((n (- n)))
    (let* ((case-fold-search nil)
	       (ch-str (if (eq ch 13) "\n" (char-to-string ch)))
	       (beg (point))
	       end)
      (save-mark-and-excursion
	    (setq end (search-forward ch-str nil t n)))
      (if (not end)
	      (message "char %s not found" ch-str)
	    (thread-first
	      (meow--make-selection '(select . find)
				                beg end expand)
	      (meow--select))
	    (setq meow--last-find ch)
	    (meow--maybe-highlight-num-positions
	     '(meow--find-continue-backward . meow--find-continue-forward))))))
(defun tu10ng/open-below()
  (interactive)
  (end-of-line)
  (open-line 1)
  (call-interactively 'next-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(defun tu10ng/open-above()
  (interactive)
  (beginning-of-line)
  (open-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(global-set-key "\C-o" 'tu10ng/open-below)
(global-set-key "\M-o" 'tu10ng/open-above)

#+end_src
*** quickrun
#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun))
(setq quickrun-timeout-seconds 5)
#+end_src
*** other-window
#+begin_src emacs-lisp

(defun tu10ng/other-window (COUNT &optional ALL-FRAMES INTERACTIVE)
  ""
  (interactive "p\ni\np")
  (if (= (length (window-list-1)) 1)
      (consult-buffer-other-window)
    (other-window COUNT ALL-FRAMES INTERACTIVE)))

(global-set-key "\M-i" #'tu10ng/other-window)
#+end_src
*** tmp key-binds
#+begin_src emacs-lisp
(global-set-key (kbd "M-l") (lambda (ARG) (interactive "p") (downcase-word (- ARG))))
(global-set-key (kbd "M-u") (lambda (ARG) (interactive "p") (upcase-word (- ARG))))
(global-set-key (kbd "M-c") (lambda (ARG) (interactive "p") (capitalize-word (- ARG))))

(global-set-key "\C-cl" #'org-store-link)
(global-set-key "\C-ca" #'org-agenda-list)
(global-set-key "\C-cc" #'org-capture)

(global-set-key "\C-ct" #'tldr)
(global-set-key "\C-cm" #'man)
(global-set-key "\C-x\C-d" #'dired)

(global-set-key "\M-p" #'backward-paragraph)
(global-set-key "\M-n" #'forward-paragraph)
(global-set-key "\M-[" #'backward-sexp)
(global-set-key "\M-]" #'forward-sexp)

(global-set-key "\C-r" #'query-replace)
#+end_src
** tools
*** consult
#+begin_src emacs-lisp
(global-unset-key "\C-s")
(use-package consult
  :bind (
         ("C-x b" . consult-buffer)                
         ("C-s r" . consult-ripgrep)
         ("C-s l" . consult-line)
         ("C-s u" . consult-focus-lines)
         ("M-g g" . consult-goto-line)             
         )
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq consult-async-refresh-delay 0.01)
  (setq register-preview-delay 0.01
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  :custom
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.01)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
  )
#+end_src

*** eros
TODO: can eros's overlay stay if its not covering the cursor?
#+begin_src emacs-lisp
(use-package eros)
(eros-mode 1)
(setq eros-eval-result-prefix "⟹ ") ; default =>
#+end_src
*** magit
#+begin_src emacs-lisp
(use-package magit)
(setq magit-commit-ask-to-stage nil)
(add-to-list 'magit-no-confirm 'stage-all-changes)
#+end_src

show git log in commit buffer to help writing commit
#+begin_src emacs-lisp
;; show last 10 commit message
(defun tu10ng/git-commit-setup ()
  (dolist (line (seq-take
                 (magit-git-lines "log" "--pretty=%B")
                 10))
    (let ((line (concat "# " line "\n")))
      (insert line))))

(add-hook 'git-commit-setup-hook #'tu10ng/git-commit-setup)


#+end_src

setup gitignore conf
#+begin_src emacs-lisp
(use-package conf-mode
  :ensure nil
  :mode (("\\.gitignore\\'"     . conf-unix-mode)
         ("\\.gitconfig\\'"     . conf-unix-mode)
         ("\\.gitattributes\\'" . conf-unix-mode)))
#+end_src
*** magit delta
git diff syntax highlighter written in rust.
#+begin_src shell
cargo install git-delta
#+end_src
#+begin_src emacs-lisp
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src
*** pyim
#+begin_src elisp
(use-package pyim)
(pyim-default-scheme 'quanpin)
(setq pyim-page-length 7)
(setq pyim-process-async-delay 0.1
      pyim-process-run-delay 0.1)
(setq pyim-indicator-list nil)
(setq pyim-punctuation-dict nil)        ;disable chinese punctuation.

(use-package pyim-basedict)
(pyim-basedict-enable)

(setq default-input-method "pyim")
;; slow down pyim init speed.
(add-to-list 'load-path "~/.emacs.d/site-lisp/pyim-tsinghua-dict")
(require 'pyim-tsinghua-dict)
(pyim-tsinghua-dict-enable)
(require 'pyim-cstring-utils)
(defun my-orderless-regexp (orig-func component)
  (let ((result (funcall orig-func component)))
    (pyim-cregexp-build result)))

(advice-add 'orderless-regexp :around #'my-orderless-regexp)
#+end_src
*** flymake
#+begin_src emacs-lisp
(global-set-key (kbd "M-g p") #'flymake-goto-prev-error)
(global-set-key (kbd "M-g M-p") #'flymake-goto-prev-error)
(global-set-key (kbd "M-g n") #'flymake-goto-next-error)
(global-set-key (kbd "M-g M-n") #'flymake-goto-next-error)

#+end_src

*** tldr
#+begin_src emacs-lisp
(use-package tldr
  :bind ("C-c t" . tldr))

#+end_src

** visuals
*** info colors, helpful
#+begin_src emacs-lisp
(use-package info-colors)
(add-hook 'Info-selection-hook 'info-colors-fontify-node)

(use-package helpful
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src
*** paren
#+begin_src emacs-lisp
(use-package paren
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-highlight-openparen t
              show-paren-delay 0.01
              rainbow-delimiters-max-face-count 6))

(use-package rainbow-delimiters
  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "lime green")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "lime green")

  (set-face-attribute 'rainbow-delimiters-depth-1-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-2-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-3-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-4-face nil :weight 'thin)
  (set-face-attribute 'rainbow-delimiters-depth-5-face nil :weight 'thin)
  (set-face-attribute 'rainbow-delimiters-depth-6-face nil :weight 'thin)
  (set-face-attribute 'rainbow-delimiters-depth-7-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil :weight 'ultra-heavy)
  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (shell-mode . rainbow-delimiters-mode)
   ;;(text-mode . rainbow-delimiters-mode)
   ))
#+end_src
*** pretty symbol characters
#+begin_src emacs-lisp
(use-package prettify-greek)
(use-package prettify-math)
(setq-default prettify-symbols-alist prettify-greek-lower)
;;(global-prettify-symbols-mode 1)
;;(global-prettify-math-mode)
(dolist (hook '(prog-mode-hook
                shell-mode-hook
                text-mode-hook))
  (add-hook hook #'(lambda ()
                     (prettify-symbols-mode 1))))
#+end_src

** frivolities
*** selectric
Every so often, you want everyone else to /know/ that you're typing, or just to
amuse oneself. Introducing: typewriter sounds!
#+begin_src emacs-lisp
(use-package selectric-mode)

#+end_src
*** wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode)
(setq wakatime-disable-on-error t)
(global-wakatime-mode 1)
#+end_src
*** rainbow cursor
#+begin_src emacs-lisp
(blink-cursor-mode -1)
(set-cursor-color "gold")

(defvar rainbow-cursor-timer nil)
(setq rainbow-cursor-color-list (vector"#FF0000";red
		                               "#FF5000"
		                               "#FF9F00";orange
		                               "#FFFF00";yellow
		                               "#BFFF00"
		                               "#00FF00";green
		                               "#00FFFF";
		                               "#0088FF"
		                               "#0000FF";blue
		                               "#5F00FF"
		                               "#8B00FF";purple
		                               "#CF00FF"
		                               "#FF0088"
		                               ))
(setq rainbow-cursor-color-pointer 1)
(defun rainbow-cursor-change-color ()
  "Take a color from `rainbow-color-list' by the pointer.
The pointer moves by +1, and restore by taking mod.  "
  (setq rainbow-cursor-color-pointer (% (1+ rainbow-cursor-color-pointer)
				                        (length rainbow-cursor-color-list)))
  (set-cursor-color (elt rainbow-cursor-color-list
                         rainbow-cursor-color-pointer)))


(defun rainbow-cursor-disable ()
  ""
  (interactive)
  (when rainbow-cursor-timer
    (cancel-timer rainbow-cursor-timer)
    (setq rainbow-cursor-timer nil)))

(defun rainbow-cursor-enable ()
  ""
  (interactive)
  (rainbow-cursor-disable)
  (setq rainbow-cursor-timer
        (run-with-timer 0 0.05 #'rainbow-cursor-change-color)))

(rainbow-cursor-enable)

#+end_src
*** typing game
speed-type
#+begin_src emacs-lisp
(use-package speed-type)

#+end_src

** file types

#+begin_src emacs-lisp
;; systemd
;; for editing systemd unit files
(use-package systemd)
;; ahk
(use-package ahk-mode)
#+end_src
* language confguration
** org mode
*** system wide config
**** git diff
Protesilaos wrote a [[https://protesilaos.com/codelog/2021-01-26-git-diff-hunk-elisp-org/][very helpful article]] in which he explains how to change the
git diff chunk heading to something more useful than just the immediate line
above the hunk --- like the parent heading.

This can be achieved by first adding a new diff mode to git in =~/.config/git/attributes=
#+begin_src fundamental
,*.org   diff=org
#+end_src

Then adding a regex for it to =~/.config/git/config=
#+begin_src gitconfig
[diff "org"]
  xfuncname = "^(\\*+ +.*)$"
#+end_src
*** better default
#+begin_src emacs-lisp
(setq org-cycle-separator-lines -1)

;; (setq org-special-ctrl-a/e t)
      
#+end_src
*** packages
**** visuals
***** use org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star ["◉" "✜" "✸" "✿" "✤" "○" "◆" "▶"]
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤")
                          (45 . "-")
                          (42 . "•"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-progress nil
        org-modern-hide-stars nil       ;C-a will not working correctly if this isnt nil
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("bibliography" . "")
          ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
          ("cite_export" . "⮭")
          ("import" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("RESULTS" . "🠶"))))
#+end_src
***** =Valign= for Org Mode tables
Use [[https://github.com/casouri/valign][valign]] for tables alignments.
#+begin_src emacs-lisp
;; (use-package valign
;;   :hook
;;   (org-mode . valign-mode)
;;   (markdown-mode . valign-mode)
;;   :config
;;   (setq valign-fancy-bar 1)
;;   )
#+end_src
**** extra functionality
*** behaviour
**** tweaking defaults
#+begin_src emacs-lisp
(setq org-directory "~/org"
      org-use-property-inheritance t
      org-log-done 'time
      org-list-allow-alphabetical t
      org-export-in-background t
      org-catch-invisible-edits 'smart
      org-export-with-sub-superscripts '{} ;?
      org-export-allow-bind-keywords t
      org-image-actual-width '(0.8)
      org-footnote-auto-adjust t)
#+end_src
**** extra functionality
***** List bullet sequence
I think it makes sense to have list bullets change with depth
#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
#+end_src
***** super agenda
#+begin_src emacs-lisp
(use-package org-super-agenda)
(org-super-agenda-mode 1)

#+end_src
***** capture
****** doct (declarative org capture templates)
#+begin_src emacs-lisp
(use-package doct)

(setq org-capture-templates
      (doct '(("gtd"
               :keys "g"
               :file "~/org/gtd.org"
               :prepend t
               :immediate-finish t
               :template ("* %^{gtd?}")))))
#+end_src
*** visuals
**** font display

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
(setq org-startup-indented t)
#+end_src
It seems reasonable to have deadlines in the error face when they're passed.
#+begin_src emacs-lisp
(setq org-agenda-deadline-faces
      '((1.01 . error)
        (1.0 . org-warning)
        (0.5 . org-upcoming-deadline)
        (0.0 . org-upcoming-distant-deadline)))
#+end_src
We can then have quote blocks stand out a bit more by making them /italic/.
#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)
#+end_src

Org files can be rather nice to look at, particularly with some of the
customisations here. This comes at a cost however, expensive font-lock.
Feeling like you're typing through molasses in large files is no fun, but there
is a way I can defer font-locking when typing to make the experience more
responsive.
#+begin_src emacs-lisp
(defun locally-defer-font-lock ()
  "Set jit-lock defer and stealth, when buffer is over a certain size."
  (when (> (buffer-size) 50000)
    (setq-local jit-lock-defer-time 0.05
                jit-lock-stealth-time 1
                org-indent-mode nil)))

(add-hook 'org-mode-hook #'locally-defer-font-lock)
#+end_src
Apparently this causes issues with some people, but I haven't noticed anything
problematic beyond the expected slight delay in some fontification, so until I
do I'll use the above.
**** symbols
#+begin_src emacs-lisp
(setq org-ellipsis " ▾ "
      org-hide-leading-stars nil)
#+end_src
**** latex
*** exporting
**** general settings
*** reveal
By default reveal is rather nice, there are just a few tweaks that I consider a
good idea.
vpn may cause this fail!
#+begin_src emacs-lisp
(use-package ox-reveal)
(setq org-re-reveal-theme "white"
      org-re-reveal-transition "slide"
      ;; org-re-reveal-plugins '(markdown notes math search zoom)
      org-reveal-root "/home/qb/Downloads/reveal.js-4.4.0/")
#+end_src
** python
#+begin_src emacs-lisp
;; black and yapf not found?
#+end_src
** makefile
#+begin_src emacs-lisp
(add-hook 'makefile-mode-hook #'(lambda () (fset 'makefile-warn-suspicious-lines 'ignore)))
#+end_src
** c mode
#+begin_src emacs-lisp

#+end_src

